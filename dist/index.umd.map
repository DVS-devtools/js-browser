{"version":3,"sources":["getQueryParams/index.js","index.js"],"names":["url","hash","window","location","href","vars","indexOf","querystring","slice","hashes","split","i","length","decodeURIComponent","Browser","currentPage","prevPage","getQueryParams"],"mappings":";AAoCC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArBc,IAAA,EAAA,WAELA,IAEFC,EAFED,EAAME,OAAOC,SAASC,KACtBC,EAAO,GAGTL,IAAsB,IAAtBA,EAAIM,QAAQ,KAAa,CACnBC,IAAAA,EAAcP,EAAIQ,MAAMR,EAAIM,QAAQ,KAAO,GAC7CC,GAAAA,EAGK,IAFCE,IAAAA,EAASF,EAAYG,MAAM,KAExBC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,GAAK,GACJ,IAA5BF,EAAOE,GAAGL,QAAQ,OAGlBD,GAFAJ,EAAOQ,EAAOE,GAAGD,MAAM,MAEb,IAAMR,OAAOW,mBAAmBZ,EAAK,KAKxDI,OAAAA,GACV,QAAA,QAAA;;AC8Bc,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1Df,IAAA,EAAA,EAAA,QAAA,qBA0De,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxDTS,IAAAA,EAwDS,WAvDG,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,YAAc,KACdC,KAAAA,SAAW,KAKXC,KAAAA,eAAiBA,EAAtB,QAgDO,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YA3BDF,MAAAA,SAAAA,GACFA,GAAe,KAAKA,cAAgBA,IAC/BC,KAAAA,SAAW,KAAKD,YAChBA,KAAAA,YAAcA,KAwBhB,CAAA,IAAA,cALG,MAAA,WACH,OAAA,KAAKC,aAIL,EAAA,GAAA,EAAA,IAAIF,EAAJ,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["/**\n * @memberof JsBrowser\n * @function getQueryParams\n * @description Return the query params object (this will work only if query params\n * are after the hashbang)\n * @returns {Object} {queryParamsKey1: queryParamsValue1, queryParamsKey2: queryParamsValue2... }\n\n *\n * @example\n * import Browser from 'js-browser';\n *\n *\n * const queryParams = Browser.getQueryParams();\n */\n\nexport default () => {\n    // take from BarneyBrowser.getQueryParams, we can change this after\n    const url = window.location.href;\n    const vars = {};\n    let hash;\n\n    if (url.indexOf('?') !== -1) {\n        const querystring = url.slice(url.indexOf('?') + 1);\n        if (querystring) {\n            const hashes = querystring.split('&');\n\n            for (let i = 0; i < hashes.length; i += 1) {\n                if (hashes[i].indexOf('=') !== -1) {\n                    hash = hashes[i].split('=');\n\n                    vars[hash[0]] = window.decodeURIComponent(hash[1]);\n                }\n            }\n        }\n    }\n    return vars;\n};","/**\n * @class JsBrowser\n * @description JsBrowser provides you an alternative method to manage previous\n * and current page changements. Is particularly used to get query params as\n * object and to get the previous page in order to implement an easy and basic history\n * in your routing\n */\n\nimport getQueryParams from './getQueryParams';\n\nclass Browser {\n    constructor() {\n        this.currentPage = null;\n        this.prevPage = null;\n\n        /**\n         * @see modules/getQueryParams\n         */\n        this.getQueryParams = getQueryParams;\n    }\n\n    /**\n     * @memberof JsBrowser\n     * @function shiftPage\n     * @description Adapt the Browser.prevPage and Browser.currentPage\n     * according to route's changement.\n     *\n     * **NB:** route changements must be specified in your routing changement function observer\n     * @param {String} currentPage set the previous page to the actual Browser.currentPage, then\n     * set the Browser.currentPage to the given new value\n     *\n     * @example\n     * // Browser.shiftPage();\n     *\n     * import Browser from 'js-browser';\n     *\n     *\n     * Browser.shiftPage('/newPage');\n     */\n    shiftPage(currentPage) {\n        if (currentPage && this.currentPage !== currentPage) {\n            this.prevPage = this.currentPage;\n            this.currentPage = currentPage;\n        }\n    }\n\n    /**\n     * @memberof JsBrowser\n     * @function getPrevPage\n     * @description Return the previous page you visited, if is empty, then returns null.\n     *\n     * @returns {String} previous page visited (ie: '/home')\n     *\n     * @example\n     * // Browser.getPrevPage();\n     *\n     * import Browser from 'js-browser';\n     *\n     *\n     * const prevPage = Browser.getPrevPage(); // '/home'\n     */\n    getPrevPage() {\n        return this.prevPage;\n    }\n}\n\nexport default new Browser();"]}